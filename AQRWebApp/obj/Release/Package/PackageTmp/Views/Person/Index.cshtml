@model AQRWebApp.Models.PersonModel

@{
    ViewBag.Title = "Danh sách hồ sơ nhân viên";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<!-- DataTables -->
<link href="@Url.Content("~/Content/Table/css/jquery.dataTables.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/Table/css/dataTables.bootstrap.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/Table/css/dataTables.fontAwesome.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/Table/css/dataTables.tableTools.css")" rel="stylesheet" />

<!--datatable-->
<script src="@Url.Content("~/Content/Table/js/jquery.dataTables.js")"></script>
<script src="@Url.Content("~/Content/Table/js/dataTables.tableTools.js")"></script>
<script src="@Url.Content("~/Content/Table/js/dataTables.bootstrap.js")"></script>
<script src="@Url.Content("~/Content/Table/js/jquery.jeditable.js")"></script>
<script src="@Url.Content("~/Content/Table/js/jquery.dataTables.editable.js")"></script>
<script src="@Url.Content("~/Content/Table/js/jquery.dataTables.rowGrouping.js")"></script>

<script type="text/javascript" charset="utf-8">
    var oTableListOfPerson;
    var genderSection = "{";
    var departmentSection = "{";

    @{
        if (Model.Genders != null)
        {
            for (int i = 0; i <= Model.Genders.Count() - 1; i++)
            {
                <text>
                    genderSection = genderSection + "'" + '@Model.Genders[i].Id' + "':'" + '@Model.Genders[i].Name'  + "'";

                    if (@i < @Model.Genders.Count() - 1)
                    {
                        genderSection = genderSection + ",";
                    }
                    else {
                        genderSection = genderSection + "}";
                    }
                </text>
            }
        }

        if (Model.Departments!= null)
        {
            for (int i = 0; i <= Model.Departments.Count() - 1; i++)
            {
                <text>
                    departmentSection = departmentSection + "'" + '@Model.Departments[i].Id' + "':'" + '@Model.Departments[i].Name'  + "'";

                    if (@i < @Model.Departments.Count() - 1)
                    {
                        departmentSection = departmentSection + ",";
                    }
                    else {
                        departmentSection = departmentSection + "}";
                    }
                </text>
            }
        }
    }

    $(function () {
        $("select[name='Filter']").change(function(){
            oTableListOfPerson.draw();
        });

        /* Init the table */
        oTableListOfPerson = $("#DataTableListOfPerson").DataTable({
            dom: "<'row-fluid'<'span6'l><'span6'f>r>t<'row-fluid'<'span12'i><'span12 center'p>>",
            tableTools: {
                "sRowSelect": "os",
                "sSelectedClass": "selected"
            },
            "bJQueryUI": false,
            "bProcessing": true,
            "bServerSide": true,
            "sAjaxSource": "@Url.Action("GetList", "Person")",
            "fnServerData": function (sSource, aoData, fnCallback) {
                aoData.push({ "name": "filter", "value": $("select[name='Filter']").val() });
                aoData.push({ "name": "departmentId", "value": $("select[name='DepartmentId']").val() });
                aoData.push({ "name": "reportDate", "value": $("input[name='ReportDate']").val() });
                $.getJSON(sSource, aoData, function (json) {
                    fnCallback(json)
                });
            },
            "iDisplayLength": 10,
            "bAutoWidth": true,
            "sPaginationType": "full_numbers",
            "aaSorting": [  [ 1, "asc" ], [ 2, "asc" ]],
            "bStateSave": true,
            "aoColumns": [
                        {
                            "sTitle": "Id",
                            "sClass": "center",
                            "sDefaultContent": "",
                            "bVisible": false

                        },
                        {
                            "sTitle": "Lastname",
                            "sClass": "center",
                            "bSearchable": true,
                            "bSortable": true,
                            "sDefaultContent": ""
                        },
                        {
                            "sTitle": "Firstname",
                            "sClass": "center",
                            "bSortable": true,
                            "bSearchable": true,
                            "bSortable": true,
                            "sDefaultContent": ""
                        },
                        {
                            "sTitle": "Gender",
                            "sClass": "center",
                            "sDefaultContent": "",
                            "bSortable": false,
                            "bSearchable": false,
                        },
                        {
                            "sName": "Birthday",
                            "sTitle": "Birthday",
                            "sClass": "center",
                            "sDefaultContent": "",
                            "bSortable": false,
                            "bSearchable": false,
                        },
                        {
                            "sTitle": "Chức danh",
                            "sClass": "center",
                            "sDefaultContent": "",
                            "bSortable": false,
                            "bSearchable": false,
                        },
                        {
                            "sTitle": "Department",
                            "sClass": "center",
                            "bSortable": false,
                            "bSearchable": false,
                            "sDefaultContent": ""
                        },
                        {
                            "sTitle": "Phone number",
                            "sClass": "center",
                            "bSortable": false,
                            "bSearchable": false,
                            "sDefaultContent": ""
                        },
                        {
                            "sTitle": "Email",
                            "sClass": "center",
                            "bSortable": false,
                            "bSearchable": false,
                            "sDefaultContent": ""
                        },
                        {
                            "sTitle": "Recruited date",
                            "sClass": "center",
                            "bSortable": false,
                            "bSearchable": false,
                            "sDefaultContent": ""
                        },
                        {
                            "sTitle": "Leave date",
                            "sClass": "center",
                            "bSortable": false,
                            "bSearchable": false,
                            "sDefaultContent": ""
                        },
                        {
                            "sTitle": "Note",
                            "sClass": "center",
                            "bSortable": false,
                            "bSearchable": false,
                            "sDefaultContent": ""
                        }

            ]
        });

        var tt = new $.fn.dataTable.TableTools(oTableListOfPerson);
        $("#tableToolListOfPerson").prepend(tt.fnContainer());

        $("#DataTableListOfPerson").dataTable().makeEditable({
            sUpdateURL: "@Url.Action("Update", "Person")",
            sDeleteURL: "@Url.Action("DeleteById", "Person")",
            sDeleteRowButtonId: "btnDeletePerson",

            "aoColumns": [
                            {},
                            {},
                            {
                                indicator: 'Lưu...',
                                tooltip: 'Chọn gender',
                                loadtext: 'Loading...',
                                type: 'select',
                                onblur: 'submit',
                                data: genderSection
                            },
                            {},
                            {},
                            {
                                indicator: 'Lưu...',
                                tooltip: 'Chọn department',
                                loadtext: 'Loading...',
                                type: 'select',
                                onblur: 'submit',
                                data: departmentSection
                            },
                            {},
                            {},
                            {},
                            {},
                            {}
            ]
        });

        $('#DataTableListOfPerson tbody').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            }
            else {
                oTableListOfPerson.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });

        $("select[name='DepartmentId']").change(function () {
            oTableListOfPerson.draw();
        });

        $("#btnAddPerson").click(function (e) {
            InitialFormAddPersonError();

            $("#formAddPerson")[0].reset();

            e.preventDefault();

            $('#modalformAddPerson').modal({
                "backdrop": "static",
                "keyboard": true,
                "show": true,
                "width": "550"
            });
        });

        $("#btnUpdateAddPerson").click(function () {

            if (CheckFormAddPerson()) {
                InitialFormAddPersonError();

                $.ajax({
                    url: "@Url.Action("Add", "Person")",
                    type: "GET",
                    data: {
                        lastname: $("input[name='Person_Lastname']").val(), firstname: $("input[name='Person_Firstname']").val(),
                        genderId: $("select[name='Person_GenderId']").val(), birthday: $("input[name='Person_Birthday']").val(),
                        phoneNumber: $("input[name='Person_PhoneNumber']").val(), email: $("input[name='Person_Email']").val(),
                        recruitedDate: $("input[name='Person_RecruitedDate']").val(), chucDanhId: $("select[name='Person_ChucDanhId']").val(), departmentId: $("select[name='Person_DepartmentId']").val(),
                        ngayNghi: $("input[name='Person_NgayNghi']").val(), note: $("input[name='Person_Note']").val()
                    },
                    dataType: "json",
                    contentType: 'application/json; charset=utf-8',
                    error: function () {
                        ShowFormAddPersonError("Access denied.");
                        return false;
                    },
                    success: function (result) {
                        if (result == "") {
                            $('#modalformAddPerson').modal("hide");
                            oTableListOfPerson.draw();
                        }
                        else {
                            ShowFormAddPersonError(result);
                        }
                    }
                });
            }
        });
    });

    function InitialFormAddPersonError() {
        $("#divAddPersonError").hide();
        $("#lblAddPersonError").text("");
    }

    function ShowFormAddPersonError(text) {
        $("#divAddPersonError").show();
        $("#lblAddPersonError").text(text);
    }

    function CheckFormAddPerson() {
        var check = true;
        var error = "";

        InitialFormAddPersonError();

        if ($("input[name='Person_PhoneNumber']").val() != "" && !IsInteger($("input[name='Person_PhoneNumber']").val())) {
            error = "wrong phone number";
            check = false;
        }

        if ($("input[name='Person_Email']").val() != "" && !validEmail($("input[name='Person_Email']").val())) {
            error = "wrong email format";
            check = false;
        }

        if ($("input[name='Person_RecruitedDate']").val() == "") {
            error = "enter recruited date";
            check = false;
        }

        if (!check)
            ShowFormAddPersonError(error);

        return check;
    }
</script>

@Html.HiddenFor(m => m.ReportDate)

<section class="content-header">
    <h1>
        PERSON LIST
        <small>manage the person list</small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Setting</a></li>
        <li class="active">Person list</li>
    </ol>
</section>

<!-- Main content -->
<section class="content">
    <div class="row">
        <div class="col-xs-12">
            <div class="box">

                <div class="box-header">
                    <h3 class="box-title">Person list</h3>

                    <div class="box-tools pull-right">
                        <button class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
                        <div class="btn-group">
                            <button class="btn btn-box-tool dropdown-toggle" data-toggle="dropdown"><i class="fa fa-wrench"></i></button>
                            <ul class="dropdown-menu" role="menu">
                                <li><a href="#">Action</a></li>
                                <li><a href="#">Another action</a></li>
                                <li><a href="#">Something else here</a></li>
                                <li class="divider"></li>
                                <li><a href="#">Separated link</a></li>
                            </ul>
                        </div>
                        <button class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                    </div>
                </div><!-- /.box-header -->

                <div class="box-body">
                    <div class="AddDeleteButton">
                        <button class="btn btn-danger" id="btnDeletePerson">Delete</button>
                        <button class="btn btn-primary" id="btnAddPerson">Add</button>
                        <label>@Html.Raw("Department:")</label>
                        @Html.DropDownListFor(m => m.DepartmentId, new SelectList(Model.Departments, "Id", "Name"))
                        <label>@Html.Raw("Filter by:")</label>
                        @Html.DropDownListFor(m => m.Filter, new SelectList(Model.ListOfFilterNames, "Id", "Name"))
                    </div>

                    <div class="tableTool" id="tableToolListOfPerson"></div>

                    <table class="dataTable" id="DataTableListOfPerson">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Lastname</th>
                                <th>Firstname</th>
                                <th></th>
                                <th></th>
                                <th>ChucDanh</th>
                                <th>Department</th>
                                <th>PhoneNumber</th>
                                <th>Email</th>
                                <th></th>
                                <th></th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
        <!--/span-->

    </div><!--/row-->
</section>

<div class="modal fade" id="modalformAddPerson" title="Thêm mới" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">×</button>
                <h3 class="animated rubberBand">@Html.Raw("Add new")</h3>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger" id="divAddPersonError">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <label id="lblAddPersonError"></label>
                </div>

                <form id="formAddPerson" role="form">
                    <fieldset>

                        <div>
                            <div class="form-group has-success col-md-4">
                                <label class="control-label" for="Person_Lastname">@Html.Raw("Lastname: ")</label>
                                <input type="text" class="form-control" id="Person_Lastname" name="Person_Lastname" placeholder="enter lastname">
                            </div>

                            <div class="form-group has-success col-md-4">
                                <label class="control-label" for="Person_Firstname">@Html.Raw("Firstname: ")</label>
                                <input type="text" class="form-control" id="Person_Firstname" name="Person_Firstname" placeholder="enter firstname">
                            </div>
                        </div>

                        <div>
                            <div class="form-group has-success col-md-4">
                                <label class="control-label" for="Person_GenderId">@Html.Raw("Gender: ")</label>
                                <div class="controls">
                                    <select id="Person_GenderId" name="Person_GenderId">
                                        @foreach (var gender in Model.Genders)
                                        {
                                            <option value="@gender.Id">@gender.Name</option>
                                        }
                                    </select>
                                </div>
                            </div>

                            <div class="form-group has-success col-md-4">
                                <label class="control-label" for="Person_Birthday">@Html.Raw("Birthday: ")</label>
                                <input type="date" class="form-control" id="Person_Birthday" name="Person_Birthday">
                            </div>
                        </div>

                        <div>
                            <div class="form-group has-success col-md-4">
                                <label class="control-label" for="Person_ChucDanhId">@Html.Raw("Chức danh: ")</label>
                                <div class="controls">
                                    <select id="Person_ChucDanhId" name="Person_ChucDanhId">
                                        @foreach (var chucDanh in Model.ChucDanhs)
                                        {
                                            <option value="@chucDanh.Id">@chucDanh.Name</option>
                                        }
                                    </select>
                                </div>
                            </div>

                            <div class="form-group has-success col-md-4">
                                <label class="control-label" for="Person_DepartmentId">@Html.Raw("Department: ")</label>
                                <div class="controls">
                                    <select id="Person_DepartmentId" name="Person_DepartmentId">
                                        @foreach (var department in Model.Departments)
                                        {
                                            <option value="@department.Id">@department.Name</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>


                        <div>
                            <div class="form-group has-success col-md-4">
                                <label class="control-label" for="Person_PhoneNumber">@Html.Raw("Phone number: ")</label>
                                <input type="text" class="form-control" id="Person_PhoneNumber" name="Person_PhoneNumber" placeholder="nhập số điện thoại">
                            </div>

                            <div class="form-group has-success col-md-4">
                                <label class="control-label" for="Person_Email">@Html.Raw("Email: ")</label>
                                <input type="text" class="form-control" id="Person_Email" name="Person_Email">
                            </div>
                        </div>

                        <div>
                            <div class="form-group has-success col-md-4">
                                <label for="Person_RecruitedDate">@Html.Raw("Recruited date: ")</label>
                                <input type="date" class="form-control" id="Person_RecruitedDate" name="Person_RecruitedDate" />
                            </div>

                            <div class="form-group has-success col-md-4">
                                <label for="Person_NgayNghi">@Html.Raw("Leave Date: ")</label>
                                <input type="date" class="form-control" id="Person_NgayNghi" name="Person_NgayNghi" />
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label" for="Person_Note">@Html.Raw("Note: ")</label>
                            <input type="text" class="form-control" id="Person_Note" name="Person_Note" placeholder="nhập ghi chú">
                        </div>

                    </fieldset>
                </form>
            </div>
            <div class="modal-footer">
                <a href="#" class="btn btn-default" data-dismiss="modal">Cancel</a>
                <a href="#" class="btn btn-primary" id="btnUpdateAddPerson">OK</a>
            </div>
        </div>
    </div>
</div>
